/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package shapefileloader.graphics;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.logging.Logger;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.geotools.map.MapContext;
import org.geotools.renderer.lite.StreamingRenderer;


import java.awt.RenderingHints;
import java.io.StringWriter;
import org.geotools.geometry.jts.ReferencedEnvelope;
import org.w3c.dom.Document;

/**
:         * This is a simple support class which allows you to generate an SVG file from a map.
2:         *
043:         * To use, setup a Map object with the layers you want to render, create an envelope for the
044:         * region to be drawn and pass in an OutputStream (probably attached to a new file) for the
045:         * resulting SVG information to be stored in.
046:         *
047:         * Optionaly you can change the default size of the SVG cavas (in effect increasing the resolution)
048:         * by calling setCavasSize before calling go.
049:         *
050:         * @author James Macgill, PennState
051:         * @source $URL: http://svn.geotools.org/geotools/tags/2.4.1/demo/svgsupport/src/main/java/org/geotools/svg/GenerateSVG.java $
052:         * @version $Id: GenerateSVG.java 27862 2007-11-12 19:51:19Z desruisseaux $
053:         */
public class GenerateSVG {

    private static Logger LOGGER = org.geotools.util.logging.Logging.getLogger("org.geotools.svgsupport");
    private Dimension canvasSize = new Dimension(300, 300);

    /**
    060:             * Creates a new instance of GenerateSVG.
    061:             */
    public GenerateSVG() {
    }

    public static void exportSVG(MapContext map, ReferencedEnvelope env, OutputStream out,
            Dimension canvasSize) throws IOException, ParserConfigurationException {

        if (canvasSize == null) {
            canvasSize = new Dimension(100, 100); // default of 300x300
        }
        Document document = null;
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
// Create an instance of org.w3c.dom.Document

        document = db.getDOMImplementation().createDocument(null, "svg", null);
        // Set up the context
        SVGGeneratorContext ctx1 = SVGGeneratorContext.createDefault(document);
        SVGGeneratorContext ctx = ctx1;
        SVGGraphics2D g2d = new SVGGraphics2D(ctx, true);
        StringWriter sw = new StringWriter();
        g2d.setSVGCanvasSize(canvasSize);
        StreamingRenderer renderer = new StreamingRenderer();
        renderer.setContext(map);
        RenderingHints hints = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        renderer.setJava2DHints(hints);




        Rectangle outputArea = new Rectangle(g2d.getSVGCanvasSize());
        ReferencedEnvelope dataArea = map.getLayerBounds();
        LOGGER.finest("rendering map");
        if (g2d == null) {
            LOGGER.info("g2d is null");
        }
        if (outputArea == null) {
            LOGGER.info("outputArea is null");
        }
        if (dataArea == null) {
            LOGGER.info("data area is null");
        }
        renderer.paint(g2d, outputArea, dataArea);
        LOGGER.finest("writing to file");
        OutputStreamWriter osw = null;
        try {
            osw = new OutputStreamWriter(out, "UTF-8");
            g2d.stream(osw);
            renderer.getContext().dispose();
        } finally {
            if (osw != null) {
                osw.close();
            }
        }

    }
}
/** Generate an SVG document from the supplied information.
066:             * Note, call setCavasSize first if you want to change the default output size.
067:             * @param map Contains the layers (features + styles) to be rendered
068:             * @param env The portion of the map to generate an SVG from
069:             * @param out Stream to write the resulting SVG out to (probable should be a new file)
070:             * @throws IOException Should anything go wrong whilst writing to 'out'
071:             * @throws ParserConfigurationException If critical XML tools are missing from the classpath
072:             */
//   public void go(MapContext map, Envelope env, OutputStream out)
//            throws IOException, ParserConfigurationException {
//        SVGGeneratorContext ctx = setupContext();
//        ctx.setComment("Generated by GeoTools2 with Batik SVG Generator");
//
//        SVGGraphics2D g2d = new SVGGraphics2D(ctx, true);
//
//        g2d.setSVGCanvasSize(getCanvasSize());
//
//        renderMap(map, env, g2d);
//        LOGGER.finest("writing to file");
//        OutputStreamWriter osw = null;
//        try {
//            osw = new OutputStreamWriter(out, "UTF-8");
//            g2d.stream(osw);
//        } finally {
//            if (osw != null) {
//                osw.close();
//            }
//        }
//
//    }
/**
097:             * DOCUMENT ME!
098:             *
099:             * @param map
100:             * @param env
101:             * @param g2d
102:             */
//    private void renderMap(final MapContext map, final Envelope env,
//            final SVGGraphics2D g2d) throws IOException {
//        StreamingRenderer renderer = new StreamingRenderer();
//        renderer.setContext(map);
//
//        Rectangle outputArea = new Rectangle(g2d.getSVGCanvasSize());
//        Envelope dataArea = map.getLayerBounds();
//        LOGGER.finest("rendering map");
//
//        renderer.paint(g2d, outputArea, ReferencedEnvelope.EVERYTHING,new AffineTransform());
//    }
/**
116:             * DOCUMENT ME!
117:             *
118:             * @return
119:             *
120:             * @throws FactoryConfigurationError
121:             * @throws ParserConfigurationException
122:             */
//    private SVGGeneratorContext setupContext()
//            throws FactoryConfigurationError,
//            ParserConfigurationException {
//        Document document = null;
//
//        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
//        DocumentBuilder db = dbf.newDocumentBuilder();
//
//        // Create an instance of org.w3c.dom.Document
//        document = db.getDOMImplementation().createDocument(null,
//                "svg", null);
//
//        // Set up the context
//        SVGGeneratorContext ctx = SVGGeneratorContext.createDefault(document);
//
//        return ctx;
//    }
//    public Dimension getCanvasSize() {
//        return this.canvasSize;
//    }
//
//    public void setCanvasSize(final Dimension size) {
//        this.canvasSize = size;
//    }

